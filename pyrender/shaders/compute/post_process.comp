#version 430

layout(local_size_x = 16, local_size_y = 16) in;

// Input image
layout(binding = 0) uniform sampler2D inputImage;

// Output image
layout(rgba32f, binding = 1) uniform image2D outputImage;

// Post-processing parameters
layout(std140, binding = 2) uniform PostProcessParams {
    float exposure;
    float contrast;
    float saturation;
    float vignetteStrength;
    vec2 resolution;
};

vec3 adjustExposure(vec3 color, float exposure) {
    return color * pow(2.0, exposure);
}

vec3 adjustContrast(vec3 color, float contrast) {
    const vec3 luminance = vec3(0.2126, 0.7152, 0.0722);
    float luminanceValue = dot(color, luminance);
    return mix(vec3(luminanceValue), color, contrast);
}

vec3 adjustSaturation(vec3 color, float saturation) {
    const vec3 luminance = vec3(0.2126, 0.7152, 0.0722);
    float luminanceValue = dot(color, luminance);
    return mix(vec3(luminanceValue), color, saturation);
}

float vignette(vec2 uv, float strength) {
    vec2 coord = (uv - 0.5) * 2.0;
    float len = length(coord);
    return smoothstep(1.4, 0.0, len * strength);
}

void main() {
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(pixelCoord, ivec2(resolution)))) return;

    vec2 uv = (vec2(pixelCoord) + 0.5) / resolution;
    vec3 color = texelFetch(inputImage, pixelCoord, 0).rgb;

    // Apply post-processing effects
    color = adjustExposure(color, exposure);
    color = adjustContrast(color, contrast);
    color = adjustSaturation(color, saturation);
    
    // Apply vignette
    float vignetteFactor = vignette(uv, vignetteStrength);
    color *= vignetteFactor;

    // Write result
    imageStore(outputImage, pixelCoord, vec4(color, 1.0));
}